This is a skeleton for CS 111 Lab 1.

Replace this README file with notes on your implementation.
Mentions any special features or limitations.

CS LAB 1 Part C
Mrinal Chawla - 004273708
Dylan Hoang - 604268191

This lab adds the parallelism “-t” functionality in the time trash program.

If the program isn’t run with “-t,” it runs normally as it did in 1B.

Otherwise, in order to run in parallel, the program requires data structures and multithreading to accommodate
appropriate parallelism, which accounts for command dependencies.

Handling parallelism is divided into two parts: Graph Construction, and Graph Execution.

What is a graph?
A Graph is two linked lists of nodes, where the total #nodes = #nodes in the command stream
	-> the first list enumerates all nodes that don’t have dependencies (these can be executed in parallel)
	-> the second list enumerates all nodes which do have dependencies (these could be executed sequentially)

In each node there exists:
	read list -> all words that will be read in by the command tree
	write list -> all words that will be written to by the command tree
	graph_node -> in each there exists
		command -> pointer to the root of the command tree
		before_list -> list of all other nodes that need to be executed before this node

How does Graph Construction take place?
Traverse through every command in the command stream, and for each command
	-create a node, extracting its dependencies by constructing its read and write lists 
	(this requires traversal of the entire command tree)
	-compare this node to all existing nodes in the current list, and add it to the dependency list 
	or the no_dependency list depending on if there is a dependency
	(dependency exists if there is intersection between write lists or read & write lists)
	(i.e. RAR/WAR/RAW)


How is the graph executed?





Limitations: